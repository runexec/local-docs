<html><head>
    <meta content="text/html; charset=UTF-8" http-equiv="Content-Type">
    <title>clojure.core.async - Facilities for async programming and communication 0.1.0 API documentation</title>
    <link href="http://clojure.github.io/core.async/static/favicon.png" rel="icon">
    <link href="http://clojure.github.io/core.async/static/favicon.png" rel="shortcut icon">
    <link media="all" type="text/css" href="clojure.core.async%20-%20Facilities%20for%20async%20programming%20and%20communication%200.1.0%20API%20documentation_files/clojure.css" rel="stylesheet">
    <link media="all" type="text/css" href="clojure.core.async%20-%20Facilities%20for%20async%20programming%20and%20communication%200.1.0%20API%20documentation_files/wiki.css" rel="stylesheet">
    <link media="all" type="text/css" href="clojure.core.async%20-%20Facilities%20for%20async%20programming%20and%20communication%200.1.0%20API%20documentation_files/internal.css" rel="stylesheet">
    <style>.menuWrapper{height: 36px;}</style>
  </head>
<!--
This document was auto-generated from the source by the clojure autodoc system.
To report errors or ask questions about the overall documentation structure, formatting,
etc., contact Tom Faulhaber (google mail name: tomfaulhaber).
For errors in the documentation of a particular namespace, contact the author of that
namespace.
-->
  <body>
    <div id="AllContentContainer">
      <div id="Header">
	<a id="Logo" href="http://clojure.github.io/core.async/index.html"><img alt="Clojure" src="clojure.core.async%20-%20Facilities%20for%20async%20programming%20and%20communication%200.1.0%20API%20documentation_files/clojure-icon.gif" height="100" width="100"></a>
	<h1><a title="page header title" id="page-header" href="http://clojure.github.io/core.async/index.html">core.async API Reference</a></h1>
      </div>
      <div id="leftcolumn"><div style="text-align: center;"></div>
<div class="menu">
  <div class="WikiCustomNav WikiElement wiki">
    <span class="toc-header"><span id="project-name">Facilities for async programming and communication</span> <span id="version">0.1.0</span> API</span><br>
    <ul>
      <li><a class="wiki_link" href="http://clojure.github.io/core.async/index.html">Overview</a></li>
      <li><a class="wiki_link" href="http://clojure.github.io/core.async/api-index.html">API Index</a></li>
    </ul>
    
    
    <a href="http://clojure.org/" class="wiki_link">Clojure Home</a>
  </div>
</div>
</div>
      <div id="rightcolumn">
	<div id="Content">
	  <div class="contentBox"><div class="innerContentBox">
              <div id="content_view" class="wiki wikiPage">
                <div id="right-sidebar"><div id="toc">
  <h1 class="nopad">Table of Contents</h1>
  <div style="margin-left: 1em;" class="toc-section">
    <a href="#toc0" style="margin-top: 3px;">Overview</a>
    
  </div><div style="margin-left: 1em;" class="toc-section">
    <a href="#" style="margin-top: 3px;"></a>
    
  </div><div style="margin-left: 1em;" class="toc-section">
    <a href="#" style="margin-top: 3px;"></a>
    
  </div><div style="margin-left: 1em;" class="toc-section">
    <a href="#var-section" style="margin-top: 3px;">Vars and Functions</a>
    <div style="margin-left: 1em;" class="toc-entry">
      <a class="toc-entry-anchor" href="#clojure.core.async/%3C%21">&lt;!</a>
      
    </div><div style="margin-left: 1em;" class="toc-entry">
      <a class="toc-entry-anchor" href="#clojure.core.async/%3C%21%21">&lt;!!</a>
      
    </div><div style="margin-left: 1em;" class="toc-entry">
      <a class="toc-entry-anchor" href="#clojure.core.async/%3E%21">&gt;!</a>
      
    </div><div style="margin-left: 1em;" class="toc-entry">
      <a class="toc-entry-anchor" href="#clojure.core.async/%3E%21%21">&gt;!!</a>
      
    </div><div style="margin-left: 1em;" class="toc-entry">
      <a class="toc-entry-anchor" href="#clojure.core.async/alt%21">alt!</a>
      
    </div><div style="margin-left: 1em;" class="toc-entry">
      <a class="toc-entry-anchor" href="#clojure.core.async/alt%21%21">alt!!</a>
      
    </div><div style="margin-left: 1em;" class="toc-entry">
      <a class="toc-entry-anchor" href="#clojure.core.async/alts%21">alts!</a>
      
    </div><div style="margin-left: 1em;" class="toc-entry">
      <a class="toc-entry-anchor" href="#clojure.core.async/alts%21%21">alts!!</a>
      
    </div><div style="margin-left: 1em;" class="toc-entry">
      <a class="toc-entry-anchor" href="#clojure.core.async/buffer">buffer</a>
      
    </div><div style="margin-left: 1em;" class="toc-entry">
      <a class="toc-entry-anchor" href="#clojure.core.async/chan">chan</a>
      
    </div><div style="margin-left: 1em;" class="toc-entry">
      <a class="toc-entry-anchor" href="#clojure.core.async/close%21">close!</a>
      
    </div><div style="margin-left: 1em;" class="toc-entry">
      <a class="toc-entry-anchor" href="#clojure.core.async/do-alts">do-alts</a>
      
    </div><div style="margin-left: 1em;" class="toc-entry">
      <a class="toc-entry-anchor" href="#clojure.core.async/dropping-buffer">dropping-buffer</a>
      
    </div><div style="margin-left: 1em;" class="toc-entry">
      <a class="toc-entry-anchor" href="#clojure.core.async/go">go</a>
      
    </div><div style="margin-left: 1em;" class="toc-entry">
      <a class="toc-entry-anchor" href="#clojure.core.async/put%21">put!</a>
      
    </div><div style="margin-left: 1em;" class="toc-entry">
      <a class="toc-entry-anchor" href="#clojure.core.async/sliding-buffer">sliding-buffer</a>
      
    </div><div style="margin-left: 1em;" class="toc-entry">
      <a class="toc-entry-anchor" href="#clojure.core.async/take%21">take!</a>
      
    </div><div style="margin-left: 1em;" class="toc-entry">
      <a class="toc-entry-anchor" href="#clojure.core.async/thread">thread</a>
      
    </div><div style="margin-left: 1em;" class="toc-entry">
      <a class="toc-entry-anchor" href="#clojure.core.async/thread-call">thread-call</a>
      
    </div><div style="margin-left: 1em;" class="toc-entry">
      <a class="toc-entry-anchor" href="#clojure.core.async/timeout">timeout</a>
      
    </div>
  </div><div style="margin-left: 1em;" class="toc-section">
    <a href="#clojure.core.async.lab" style="margin-top: 3px;">clojure.core.async.lab</a>
    <div style="margin-left: 1em;" class="toc-entry">
      <a class="toc-entry-anchor" href="#clojure.core.async.lab/BroadcastingWritePort">BroadcastingWritePort</a>
      
    </div><div style="margin-left: 1em;" class="toc-entry">
      <a class="toc-entry-anchor" href="#clojure.core.async.lab/MultiplexingReadPort">MultiplexingReadPort</a>
      
    </div><div style="margin-left: 1em;" class="toc-entry">
      <a class="toc-entry-anchor" href="#clojure.core.async.lab/-%3EBroadcastingWritePort">-&gt;BroadcastingWritePort</a>
      
    </div><div style="margin-left: 1em;" class="toc-entry">
      <a class="toc-entry-anchor" href="#clojure.core.async.lab/-%3EMultiplexingReadPort">-&gt;MultiplexingReadPort</a>
      
    </div><div style="margin-left: 1em;" class="toc-entry">
      <a class="toc-entry-anchor" href="#clojure.core.async.lab/broadcast">broadcast</a>
      
    </div><div style="margin-left: 1em;" class="toc-entry">
      <a class="toc-entry-anchor" href="#clojure.core.async.lab/multiplex">multiplex</a>
      
    </div><div style="margin-left: 1em;" class="toc-entry">
      <a class="toc-entry-anchor" href="#clojure.core.async.lab/spool">spool</a>
      
    </div>
  </div>
</div>
</div>
                <div id="content-tag"><h1 id="overview">API for <span id="clojure.core.async">clojure.core.async</span>
  - <span id="header-project">Facilities for async programming and communication</span> <span id="header-version">0.1.0</span><span id="header-status-block"> (<span id="header-status">in development</span>)</span>
  </h1>

<br>Full namespace name: <span id="long-name">clojure.core.async</span>
<p></p>
<h2>Overview</h2>
<div id="home-page">Project home page is <a href="http://github.com/clojure/core.async/">http://github.com/clojure/core.async/</a></div>
<pre id="namespace-docstr"></pre>


<br>



<div id="var-section">
  <p></p>
  <h2>Public Variables and Functions</h2>
  <div id="var-entry">
    <br>
    <hr>
    <h2 id="clojure.core.async/&lt;!">&lt;!</h2>
    <span id="var-type">function</span><br>
    <pre id="var-usage">Usage: (&lt;! port)
</pre>
    <pre id="var-docstr">takes a val from port. Must be called inside a (go ...) block. Will
return nil if closed. Will park if nothing is available.</pre>
    
    
    <a href="https://github.com/clojure/core.async/blob/bb77337b3e9ce2118916fe84ae37c064a2eb9c55/src/main/clojure/clojure/core/async.clj#L76" id="var-source">Source</a>
  </div><div id="var-entry">
    <br>
    <hr>
    <h2 id="clojure.core.async/&lt;!!">&lt;!!</h2>
    <span id="var-type">function</span><br>
    <pre id="var-usage">Usage: (&lt;!! port)
</pre>
    <pre id="var-docstr">takes a val from port. Will return nil if closed. Will block
if nothing is available.</pre>
    
    
    <a href="https://github.com/clojure/core.async/blob/bb77337b3e9ce2118916fe84ae37c064a2eb9c55/src/main/clojure/clojure/core/async.clj#L66" id="var-source">Source</a>
  </div><div id="var-entry">
    <br>
    <hr>
    <h2 id="clojure.core.async/&gt;!">&gt;!</h2>
    <span id="var-type">function</span><br>
    <pre id="var-usage">Usage: (&gt;! port val)
</pre>
    <pre id="var-docstr">puts a val into port. nil values are not allowed. Must be called
inside a (go ...) block. Will park if no buffer space is available.</pre>
    
    
    <a href="https://github.com/clojure/core.async/blob/bb77337b3e9ce2118916fe84ae37c064a2eb9c55/src/main/clojure/clojure/core/async.clj#L107" id="var-source">Source</a>
  </div><div id="var-entry">
    <br>
    <hr>
    <h2 id="clojure.core.async/&gt;!!">&gt;!!</h2>
    <span id="var-type">function</span><br>
    <pre id="var-usage">Usage: (&gt;!! port val)
</pre>
    <pre id="var-docstr">puts a val into port. nil values are not allowed. Will block if no
buffer space is available. Returns nil.</pre>
    
    
    <a href="https://github.com/clojure/core.async/blob/bb77337b3e9ce2118916fe84ae37c064a2eb9c55/src/main/clojure/clojure/core/async.clj#L97" id="var-source">Source</a>
  </div><div id="var-entry">
    <br>
    <hr>
    <h2 id="clojure.core.async/alt!">alt!</h2>
    <span id="var-type">macro</span><br>
    <pre id="var-usage">Usage: (alt! &amp; clauses)
</pre>
    <pre id="var-docstr">Makes a single choice between one of several channel operations,
as if by alts!, returning the value of the result expr corresponding
to the operation completed. Must be called inside a (go ...) block.

Each clause takes the form of:

channel-op[s] result-expr

where channel-ops is one of:

take-port - a single port to take
[take-port | [put-port put-val] ...] - a vector of ports as per alts!
:default | :priority - an option for alts!

and result-expr is either a list beginning with a vector, whereupon that
vector will be treated as a binding for the [val port] return of the
operation, else any other expression.

(alt!
  [c t] ([val ch] (foo ch val))
  x ([v] v)
  [[out val]] :wrote
  :default 42)

Each option may appear at most once. The choice and parking
characteristics are those of alts!.</pre>
    
    
    <a href="https://github.com/clojure/core.async/blob/bb77337b3e9ce2118916fe84ae37c064a2eb9c55/src/main/clojure/clojure/core/async.clj#L293" id="var-source">Source</a>
  </div><div id="var-entry">
    <br>
    <hr>
    <h2 id="clojure.core.async/alt!!">alt!!</h2>
    <span id="var-type">macro</span><br>
    <pre id="var-usage">Usage: (alt!! &amp; clauses)
</pre>
    <pre id="var-docstr">Like alt!, except as if by alts!!, will block until completed, and
not intended for use in (go ...) blocks.</pre>
    
    
    <a href="https://github.com/clojure/core.async/blob/bb77337b3e9ce2118916fe84ae37c064a2eb9c55/src/main/clojure/clojure/core/async.clj#L286" id="var-source">Source</a>
  </div><div id="var-entry">
    <br>
    <hr>
    <h2 id="clojure.core.async/alts!">alts!</h2>
    <span id="var-type">function</span><br>
    <pre id="var-usage">Usage: (alts! ports &amp; {:as opts})
</pre>
    <pre id="var-docstr">Completes at most one of several channel operations. Must be called
inside a (go ...) block. ports is a set of channel endpoints, which
can be either a channel to take from or a vector of
[channel-to-put-to val-to-put], in any combination. Takes will be
made as if by &lt;!, and puts will be made as if by &gt;!. Unless
the :priority option is true, if more than one port operation is
ready a non-deterministic choice will be made. If no operation is
ready and a :default value is supplied, [default-val :default] will
be returned, otherwise alts! will park until the first operation to
become ready completes. Returns [val port] of the completed
operation, where val is the value taken for takes, and nil for puts.

opts are passed as :key val ... Supported options:

:default val - the value to use if none of the operations are immediately ready
:priority true - (default nil) when true, the operations will be tried in order.

Note: there is no guarantee that the port exps or val exprs will be
used, nor in what order should they be, so they should not be
depended upon for side effects.</pre>
    
    
    <a href="https://github.com/clojure/core.async/blob/bb77337b3e9ce2118916fe84ae37c064a2eb9c55/src/main/clojure/clojure/core/async.clj#L223" id="var-source">Source</a>
  </div><div id="var-entry">
    <br>
    <hr>
    <h2 id="clojure.core.async/alts!!">alts!!</h2>
    <span id="var-type">function</span><br>
    <pre id="var-usage">Usage: (alts!! ports &amp; {:as opts})
</pre>
    <pre id="var-docstr">Like alts!, except takes will be made as if by &lt;!!, and puts will
be made as if by &gt;!!, will block until completed, and not intended
for use in (go ...) blocks.</pre>
    
    
    <a href="https://github.com/clojure/core.async/blob/bb77337b3e9ce2118916fe84ae37c064a2eb9c55/src/main/clojure/clojure/core/async.clj#L212" id="var-source">Source</a>
  </div><div id="var-entry">
    <br>
    <hr>
    <h2 id="clojure.core.async/buffer">buffer</h2>
    <span id="var-type">function</span><br>
    <pre id="var-usage">Usage: (buffer n)
</pre>
    <pre id="var-docstr">Returns a fixed buffer of size n. When full, puts will block/park.</pre>
    
    
    <a href="https://github.com/clojure/core.async/blob/bb77337b3e9ce2118916fe84ae37c064a2eb9c55/src/main/clojure/clojure/core/async.clj#L37" id="var-source">Source</a>
  </div><div id="var-entry">
    <br>
    <hr>
    <h2 id="clojure.core.async/chan">chan</h2>
    <span id="var-type">function</span><br>
    <pre id="var-usage">Usage: (chan)
       (chan buf-or-n)
</pre>
    <pre id="var-docstr">Creates a channel with an optional buffer. If buf-or-n is a number,
will create and use a fixed buffer of that size.</pre>
    
    
    <a href="https://github.com/clojure/core.async/blob/bb77337b3e9ce2118916fe84ae37c064a2eb9c55/src/main/clojure/clojure/core/async.clj#L55" id="var-source">Source</a>
  </div><div id="var-entry">
    <br>
    <hr>
    <h2 id="clojure.core.async/close!">close!</h2>
    <span id="var-type">function</span><br>
    <pre id="var-usage">Usage: (close! chan)
</pre>
    <pre id="var-docstr">Closes a channel. The channel will no longer accept any puts (they
will be ignored). Data in the channel remains available for taking, until
exhausted, after which takes will return nil. If there are any
pending takes, they will be dispatched with nil. Closing a closed
channel is a no-op. Returns nil.</pre>
    
    
    <a href="https://github.com/clojure/core.async/blob/bb77337b3e9ce2118916fe84ae37c064a2eb9c55/src/main/clojure/clojure/core/async.clj#L130" id="var-source">Source</a>
  </div><div id="var-entry">
    <br>
    <hr>
    <h2 id="clojure.core.async/do-alts">do-alts</h2>
    <span id="var-type">function</span><br>
    <pre id="var-usage">Usage: (do-alts fret ports opts)
</pre>
    <pre id="var-docstr">returns derefable [val port] if immediate, nil if enqueued</pre>
    
    
    <a href="https://github.com/clojure/core.async/blob/bb77337b3e9ce2118916fe84ae37c064a2eb9c55/src/main/clojure/clojure/core/async.clj#L183" id="var-source">Source</a>
  </div><div id="var-entry">
    <br>
    <hr>
    <h2 id="clojure.core.async/dropping-buffer">dropping-buffer</h2>
    <span id="var-type">function</span><br>
    <pre id="var-usage">Usage: (dropping-buffer n)
</pre>
    <pre id="var-docstr">Returns a buffer of size n. When full, puts will complete but
val will be dropped (no transfer).</pre>
    
    
    <a href="https://github.com/clojure/core.async/blob/bb77337b3e9ce2118916fe84ae37c064a2eb9c55/src/main/clojure/clojure/core/async.clj#L42" id="var-source">Source</a>
  </div><div id="var-entry">
    <br>
    <hr>
    <h2 id="clojure.core.async/go">go</h2>
    <span id="var-type">macro</span><br>
    <pre id="var-usage">Usage: (go &amp; body)
</pre>
    <pre id="var-docstr">Asynchronously executes the body, returning immediately to the
calling thread. Additionally, any visible calls to &lt;!, &gt;! and alt!/alts!
channel operations within the body will block (if necessary) by
'parking' the calling thread rather than tying up an OS thread (or
the only JS thread when in ClojureScript). Upon completion of the
operation, the body will be resumed.

Returns a channel which will receive the result of the body when
completed</pre>
    
    
    <a href="https://github.com/clojure/core.async/blob/bb77337b3e9ce2118916fe84ae37c064a2eb9c55/src/main/clojure/clojure/core/async.clj#L336" id="var-source">Source</a>
  </div><div id="var-entry">
    <br>
    <hr>
    <h2 id="clojure.core.async/put!">put!</h2>
    <span id="var-type">function</span><br>
    <pre id="var-usage">Usage: (put! port val)
       (put! port val fn0)
       (put! port val fn0 on-caller?)
</pre>
    <pre id="var-docstr">Asynchronously puts a val into port, calling fn0 (if supplied) when
complete. nil values are not allowed. Will throw if closed. If
on-caller? (default true) is true, and the put is immediately
accepted, will call fn0 on calling thread.  Returns nil.</pre>
    
    
    <a href="https://github.com/clojure/core.async/blob/bb77337b3e9ce2118916fe84ae37c064a2eb9c55/src/main/clojure/clojure/core/async.clj#L115" id="var-source">Source</a>
  </div><div id="var-entry">
    <br>
    <hr>
    <h2 id="clojure.core.async/sliding-buffer">sliding-buffer</h2>
    <span id="var-type">function</span><br>
    <pre id="var-usage">Usage: (sliding-buffer n)
</pre>
    <pre id="var-docstr">Returns a buffer of size n. When full, puts will complete, and be
buffered, but oldest elements in buffer will be dropped (not
transferred).</pre>
    
    
    <a href="https://github.com/clojure/core.async/blob/bb77337b3e9ce2118916fe84ae37c064a2eb9c55/src/main/clojure/clojure/core/async.clj#L48" id="var-source">Source</a>
  </div><div id="var-entry">
    <br>
    <hr>
    <h2 id="clojure.core.async/take!">take!</h2>
    <span id="var-type">function</span><br>
    <pre id="var-usage">Usage: (take! port fn1)
       (take! port fn1 on-caller?)
</pre>
    <pre id="var-docstr">Asynchronously takes a val from port, passing to fn1. Will pass nil
if closed. If on-caller? (default true) is true, and value is
immediately available, will call fn1 on calling thread.
Returns nil.</pre>
    
    
    <a href="https://github.com/clojure/core.async/blob/bb77337b3e9ce2118916fe84ae37c064a2eb9c55/src/main/clojure/clojure/core/async.clj#L82" id="var-source">Source</a>
  </div><div id="var-entry">
    <br>
    <hr>
    <h2 id="clojure.core.async/thread">thread</h2>
    <span id="var-type">macro</span><br>
    <pre id="var-usage">Usage: (thread &amp; body)
</pre>
    <pre id="var-docstr">Executes the body in another thread, returning immediately to the
calling thread. Returns a channel which will receive the result of
the body when completed.</pre>
    
    
    <a href="https://github.com/clojure/core.async/blob/bb77337b3e9ce2118916fe84ae37c064a2eb9c55/src/main/clojure/clojure/core/async.clj#L377" id="var-source">Source</a>
  </div><div id="var-entry">
    <br>
    <hr>
    <h2 id="clojure.core.async/thread-call">thread-call</h2>
    <span id="var-type">function</span><br>
    <pre id="var-usage">Usage: (thread-call f)
</pre>
    <pre id="var-docstr">Executes f in another thread, returning immediately to the calling
thread. Returns a channel which will receive the result of calling
f when completed.</pre>
    
    
    <a href="https://github.com/clojure/core.async/blob/bb77337b3e9ce2118916fe84ae37c064a2eb9c55/src/main/clojure/clojure/core/async.clj#L361" id="var-source">Source</a>
  </div><div id="var-entry">
    <br>
    <hr>
    <h2 id="clojure.core.async/timeout">timeout</h2>
    <span id="var-type">function</span><br>
    <pre id="var-usage">Usage: (timeout msecs)
</pre>
    <pre id="var-docstr">Returns a channel that will close after msecs</pre>
    
    
    <a href="https://github.com/clojure/core.async/blob/bb77337b3e9ce2118916fe84ae37c064a2eb9c55/src/main/clojure/clojure/core/async.clj#L61" id="var-source">Source</a>
  </div>
</div>
<br>
<h2 id="clojure.core.async.lab">clojure.core.async.lab</h2>
<pre id="namespace-docstr">core.async HIGHLY EXPERIMENTAL feature exploration

Caveats:

1. Everything defined in this namespace is experimental, and subject
to change or deletion without warning.

2. Many features provided by this namespace are highly coupled to
implementation details of core.async. Potential features which
operate at higher levels of abstraction are suitable for inclusion
in the examples.

3. Features provided by this namespace MAY be promoted to
clojure.core.async at a later point in time, but there is no
guarantee any of them will.</pre>


<br>

<div id="type-section">
  <p></p>
  <h2>Types</h2>
  <div id="type-entry">
    <br>
    <hr>
    <h2 id="clojure.core.async.lab/BroadcastingWritePort">BroadcastingWritePort</h2>
    <span id="type-type">type</span><br>
    <pre id="type-docstr"></pre>
    Fields: <span id="type-fields">[write-ports]</span><br>
    Protocols: <span id="type-protocols">clojure.core.async.impl.protocols/WritePort</span><br>
    Interfaces: <span id="type-interfaces"></span><br>
  </div><div id="type-entry">
    <br>
    <hr>
    <h2 id="clojure.core.async.lab/MultiplexingReadPort">MultiplexingReadPort</h2>
    <span id="type-type">type</span><br>
    <pre id="type-docstr"></pre>
    Fields: <span id="type-fields">[mutex read-ports]</span><br>
    Protocols: <span id="type-protocols">clojure.core.async.impl.protocols/ReadPort</span><br>
    Interfaces: <span id="type-interfaces"></span><br>
  </div>
</div>
<div id="var-section">
  <p></p>
  <h2>Public Variables and Functions</h2>
  <div id="var-entry">
    <br>
    <hr>
    <h2 id="clojure.core.async.lab/-&gt;BroadcastingWritePort">-&gt;BroadcastingWritePort</h2>
    <span id="var-type">function</span><br>
    <pre id="var-usage">Usage: (-&gt;BroadcastingWritePort write-ports)
</pre>
    <pre id="var-docstr">Positional factory function for class clojure.core.async.lab.BroadcastingWritePort.</pre>
    
    
    <a href="https://github.com/clojure/core.async/blob/ad7ca68a831a1e469b6f30334903279b2e4e43f7/src/main/clojure/clojure/core/async/lab.clj#L93" id="var-source">Source</a>
  </div><div id="var-entry">
    <br>
    <hr>
    <h2 id="clojure.core.async.lab/-&gt;MultiplexingReadPort">-&gt;MultiplexingReadPort</h2>
    <span id="var-type">function</span><br>
    <pre id="var-usage">Usage: (-&gt;MultiplexingReadPort mutex read-ports)
</pre>
    <pre id="var-docstr">Positional factory function for class clojure.core.async.lab.MultiplexingReadPort.</pre>
    
    
    <a href="https://github.com/clojure/core.async/blob/ad7ca68a831a1e469b6f30334903279b2e4e43f7/src/main/clojure/clojure/core/async/lab.clj#L33" id="var-source">Source</a>
  </div><div id="var-entry">
    <br>
    <hr>
    <h2 id="clojure.core.async.lab/broadcast">broadcast</h2>
    <span id="var-type">function</span><br>
    <pre id="var-usage">Usage: (broadcast &amp; ports)
</pre>
    <pre id="var-docstr">Returns a broadcasting write port which, when written to, writes
the value to each of ports.

Writes to the broadcasting port will park until the value is written
to each of the ports used to create it. For this reason, it is
strongly advised that each of the underlying ports support buffered
writes.</pre>
    
    
    <a href="https://github.com/clojure/core.async/blob/ad7ca68a831a1e469b6f30334903279b2e4e43f7/src/main/clojure/clojure/core/async/lab.clj#L99" id="var-source">Source</a>
  </div><div id="var-entry">
    <br>
    <hr>
    <h2 id="clojure.core.async.lab/multiplex">multiplex</h2>
    <span id="var-type">function</span><br>
    <pre id="var-usage">Usage: (multiplex &amp; ports)
</pre>
    <pre id="var-docstr">Returns a multiplexing read port which, when read from, produces a
value from one of ports.

If at read time only one port is available to be read from, the
multiplexing port will return that value. If multiple ports are
available to be read from, the multiplexing port will return one
value from a port chosen non-deterministicly. If no port is
available to be read from, parks execution until a value is
available.</pre>
    
    
    <a href="https://github.com/clojure/core.async/blob/ad7ca68a831a1e469b6f30334903279b2e4e43f7/src/main/clojure/clojure/core/async/lab.clj#L69" id="var-source">Source</a>
  </div><div id="var-entry">
    <br>
    <hr>
    <h2 id="clojure.core.async.lab/spool">spool</h2>
    <span id="var-type">function</span><br>
    <pre id="var-usage">Usage: (spool s c)
       (spool s)
</pre>
    <pre id="var-docstr">Take a sequence and puts each value on a channel and returns the channel.
If no channel is provided, an unbuffered channel is created. If the
sequence ends, the channel is closed.</pre>
    
    
    <a href="https://github.com/clojure/core.async/blob/ad7ca68a831a1e469b6f30334903279b2e4e43f7/src/main/clojure/clojure/core/async/lab.clj#L112" id="var-source">Source</a>
  </div>
</div>


</div>
              </div>
            </div>
          </div>
	</div>
	<div id="foot">
	  <div style="text-align: center;" id="copyright">Copyright 2007-2013 by Rich Hickey and the various contributors</div>
	</div>
      </div>
      <div id="DesignedBy">Logo &amp; site design by <a title="Visit Tom Hickey's website." href="http://www.tomhickey.com/">Tom Hickey</a>.<br>
      Clojure auto-documentation system by Tom Faulhaber.</div>
    </div>
    <!-- /AllContentContainer -->
  

</body></html>